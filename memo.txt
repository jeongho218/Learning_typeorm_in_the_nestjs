섹션 7 
프로젝트 3 : 백엔드의 꽃 SQL / TypeORM in the Nest (보너스 섹션)

- 프로젝트 셋업 with typeorm-in-the-nest (new)
```
블로그 API를 만들 예정

인스타그램이나 쇼핑몰과 같은 이커머스 플랫폼도 
블로그에 추가적인 기술을 덧붙인 것이므로
블로그 실습 먼저 할 것임

보일러플레이트는 어떤 프로젝트에서 가장 기초가 되는 코드들,
아직 완성되지 않은, 절반 정도 만들어진 프로젝트를 말한다.

코드 설명 다 할거니까 일단 듣자
```


- PostgreSQL 셋업 (with docker) & TypeORM과 연결
```
도커는 컨테이너 격리 기술을 제공해주는 소프트웨어
도커 사용이 어렵다면 그냥 aws rds 사용해도 된다

postgresql도 사용이 어렵다면 mysql 사용해도 무방하다
강사 개인적으로 토이 프로젝트나 신규 프로젝트 할 때는
mysql보다 postgresql이 조금 더 괜찮다고 생각해서 사용하는 것 뿐이다

pgadmin은 mysql의 workbench같은 postgresql의 관리툴

프로젝트 실행
$ npm run start:dev

postgresql DB가 연결은 된 것 같지만
현재 postgresql의 버전은 pgadmin이 지원하지 않는 버전이라
DB의 내용을 볼 수가 없음

대신 VSC의 확장프로그램 PostgreSQL Explorer를 설치했으니
DB를 확인하고 싶다면 이걸 사용할 것

API가 회원가입, 로그인, 회원정보 가져오기, 로그아웃이 있는 것을 확인함
swagger도 설치해야할 것 같음

JWT 사용해서 로그인하고 있으니 나중에 참조하기 좋을 것 같음

현재 사용자가 admin인지 아닌지는
user 엔터티에서 boolean 타입의 isAdmin 컬럼을 사용해서 저장하고 있음
왜 전에는 이 방법을 떠올리지 못했을까
이것도 나중에 사용해봐야지

postgresql explorer - ctrs 우클릭
New Query 하면 쿼리문 보낼 수 있음
사용법 예시 
select * from public."USER"

```


- 보일러플레이트 코드 리뷰 및 테스팅 소개
```
swagger - http://localhost:5000/docs/
접속에 필요한 계정과 패스워드는 .env에 작성
```


- TDD 소개 및 통합 테스팅
```
TDD 테스트 주도 개발

'@nestjs/testing' 라이브러리
jest를 nestjs 프레임웨크에서 사용할 수 있도록 도와주는 모듈

/test/app.e2e-spec.ts

describe
jest의 메인 함수
테스트의 내용이 들어간다

describe 함수의 콜백으로 describe를 한번 더 넣을 수도 있다

beforeEach
테스트를 진행하기 전 가장 먼저 실행되는 함수

it
테스트 단위
각 테스트의 내용이 들어가는 함수
이 함수명은 test라고 적어도 같은 역할을 한다


현재 코드에선 테스트를 2개 이상 적을 경우
"EarlyHasActiveConnectionError: 해당 이름의 연결이 이미 존재하고 현재 활성 연결 세션이 있으므로 "default"라는 새 연결을 생성할 수 없습니다." 라는 에러 메세지가 나온다.
이는 가장 첫번째 테스트로 인해 'default' 라는 이름의 DB 연결이 생성되었고, 연결 세션이 활성화 중이나, beforeEach 함수에 있는 'Test.createTestingModule' 모듈에 의해 다시 DB 연결을 시도하게 되어 발생하는 에러이다.

모든 테스트를 진행하기 위해
beforeEach 메소드 아래 afterEach 메소드를 작성하자

afterEach(async () => {
  await app.close();
});

매 테스트가 종료될때마다 어플리케이션을 종료하는 내용이다.
```


- [보충] 보일러플레이트 코드 업데이트
```
main.ts 

// 클래스의 직렬화
this.server.useGlobalInterceptors(
  new ClassSerializerInterceptor(this.server.get(Reflector)),
);

엔터티에서 Exclude 데코레이터가 붙은 컬럼은 리턴되는 필드에서 제외됨
users.entity.ts의 경우 'password' 컬럼에 Exclude가 붙어
회원가입, 로그인 시 패스워드에 관한 데이터는 리턴 내용에서 제외되었음
```


- 요구사항에 맞는 도메인 설계, ERD 모델링에 대하여
```
블로그 모듈 생성
$ nest generate module blogs

태그 모듈 생성
$ nest generate module tags

방문자 모듈 생성
$ nest generate module visitors

프로필 모듈 생성
$ nest generate module profiles

각 도메인에 엔터티 생성
id, createdAt, updatedAt, deletedAt 컬럼은 CommonEntity에서 상속받는다.

id는 uuid이다. autoIncrements로 바꿔도 무방하다.

@CreateDateColumn({
  type: 'timestamptz',
})
createdAt: Date;

timestamptz은 timestamp with time zone, 
DB에서 설정한 타임존과 함께 저장한다는 의미

백엔드 개발을 하면서, 특히 RDBMS로 작업할 하면서 SQL 문법을 몰라서는 안됨
SQL 튜토리얼 - https://www.w3schools.com/sql/default.asp
```


- 'AlreadyHasActiveConnectionError' 에러 해결
```
app.module.ts
TypeOrmModuleOptions에서 주석으로 설정했었던
keepConnectionAlive 옵션을 true로 설정하였다.

이 옵션은 어플리케이션이 종료되어도 DB 연결을 끊지 않겠다는 옵션이다.
default는 false이며, 어플리케이션 종료 시 DB 연결도 끊어진다.

이 옵션이 없으면 작업 중 e2e 테스트 시
"이미 'default'라는 이름의 DB 연결 및 활성화 된 세션이 있어 같은 이름으로 DB 연결을 할 수 없습니다."는 에러가 발생한다.

이후 'AlreadyHasActiveConnectionError: Cannot create a new connection named "default"' 에러 해결

app.e2e-spec.ts
afterEach(async () => {await app.close()}); 메소드 제거

관련 내용 - https://ctrs.tistory.com/472
```


- 엔티티간에 관계에 대하여
```
공식 문서
https://typeorm.io/relations

일대일 관계일때 (ex. user-profile)
@OneToOne


일대다 관계일때 (ex. user-blog)
@OneToMany (상대 테이블에선 @ManyToOne)


다대다 관계일때 (ex. blog-tag)
@ManyToMany (상대 테이블에서도 @ManyToMany)

예를 들어 블로그와 태그의 경우 하나의 블로그에 여러 개의 태그가 사용될 수 있고,
하나의 태그가 여러 블로그에서 사용될 수 있다.

이런 다대다 관계에는 두 테이블 사이에 매개 테이블이 하나 더 필요하다 (ERD의 BLOG_TAG 테이블 참조)

이 작업을 위해 @JoinTable 메소드를 사용한다

예시
  @JoinTable({
    // blogs와 tag의 중간 매개 테이블을 생성
    name: 'BLOG_TAG', // 매개 테이블의 이름
    joinColumn: {
      // 자기 자신 엔터티 (blogs)
      referencedColumnName: 'id', // 매개 테이블로 보낼 컬럼
      name: 'blog_id', // 매개 테이블에서 쓰일 컬럼명
    },
    inverseJoinColumn: {
      // 상대 엔터티(tag)
      referencedColumnName: 'id', // 매개 테이블로 가져올 컬럼
      name: 'tag_id', // 매개 테이블에서 쓰일 컬럼명
    },
  })


외래키 가져오기 
@JoinColumn

예시
@JoinColumn({ name: 'profile_id', referencedColumnName: 'id' })
name인 'referencedColumnName'는 상대 엔터티에서 가져올 컬럼
'name'은 해당 컬럼을 이 엔터티에서 사용할때의 컬럼명

다른 엔터티에서 키를 가져오는 엔터티에서만 작성하며
다른 엔터티에 키를 제공하는 엔터티에서는 JoinColumn을 작성하지 않는다.


cascade 옵션
예시 (cascade: true)
엔터티에 대한 작업 내용이 해당 엔터티를 참조하고 있는
하위 엔터티에도 적용된다.

onDelete 옵션
CASCADE: 외래키로 참조하고 있는 데이터가 삭제되면
해당 데이터를 참조 중이던 데이터도 함께 삭제된다.

SET NULL: 외래키로 참조하고 있는 데이터가 삭제되면
해당 데이터를 참조 중이던 데이터에서는 null로 표시된다.
```
